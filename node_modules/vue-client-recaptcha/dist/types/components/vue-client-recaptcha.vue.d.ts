declare const _default: import("vue").DefineComponent<{
    value: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    chars: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    count: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    hideLines: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    customTextColor: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    textColors: {
        type: import("vue").PropType<string[]>;
    } & {
        default: () => any[];
    };
    isDirty: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    width: {
        type: import("vue").PropType<any>;
    } & {
        default: (props: any) => number;
    };
    height: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    canvasClass: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    icon: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    captchaFont: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    hideRefreshIcon: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
}, () => void, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("isValid" | "getCode")[], "isValid" | "getCode", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    value?: unknown;
    chars?: unknown;
    count?: unknown;
    hideLines?: unknown;
    customTextColor?: unknown;
    textColors?: unknown;
    isDirty?: unknown;
    width?: unknown;
    height?: unknown;
    canvasClass?: unknown;
    icon?: unknown;
    captchaFont?: unknown;
    hideRefreshIcon?: unknown;
} & {
    value: string;
    icon: string;
    chars: string;
    count: number;
    hideLines: boolean;
    customTextColor: string;
    textColors: string[];
    isDirty: boolean;
    width: any;
    height: number;
    canvasClass: string;
    captchaFont: string;
    hideRefreshIcon: boolean;
} & {}> & {
    onIsValid?: (...args: any[]) => any;
    onGetCode?: (...args: any[]) => any;
}, {
    value: string;
    icon: string;
    chars: string;
    count: number;
    hideLines: boolean;
    customTextColor: string;
    textColors: string[];
    isDirty: boolean;
    width: any;
    height: number;
    canvasClass: string;
    captchaFont: string;
    hideRefreshIcon: boolean;
}>;
export default _default;
